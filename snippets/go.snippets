snippet fm "method declaration"
	func (${1:receiver} ${2:type}) ${3:funcName}(${4}) ${5} {
		${6}
	}
	${0}

snippet fn "function declaration"
	func ${1:funcName}(${2}) ${3} {
		${4}
	}
	${0}

snippet tyi "type interface declaration"
	type ${1} interface {
		${2}
	}

snippet tys "type struct declaration"
	type ${1} struct {
		${2}
	}

snippet tyf "type func declaration"
	type ${1} func(${2}) ${3}

snippet pkgm "package main and main function"
	package main

	func main() {
		${0}
	}

snippet pkg "named package"
	package `substitute(expand("%:h"), '\w*\/', '', 'g')`

	${0}

snippet fa "anonymous function"
	func(${1}) ${2} {
		${0}
	}

snippet ef "Error with log.Fatal(err)"
	if err != nil {
		log.Fatal(err)
	}

snippet er "Error return"
	if err != nil {
		return err
	}

snippet er, "Error return with two return values"
	if err != nil {
		return ${1:nil}, ${2:err}
	}

snippet nr "Return nil"
	return nil

snippet nr, "Return multiple values with nil as last"
	return ${1}, nil

snippet pfw "Format print to writer"
	fmt.Fprintf(${1:writer}, "${2}\n", ${3})

snippet iota "const ( ... = iota )"
	const (
		${1:NAME} ${2:Type} = iota
		${0}
	)

snippet te "Test error"
	t.Errorf("${1:message}", ${2}, ${3})

snippet ae "assert.Equal"
	assert.Equal(t, test.${1}, ${2}, test.name)

snippet is "Init struct"
	&${1}{
		${2}
	}
