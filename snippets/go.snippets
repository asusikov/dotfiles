snippet fm "method declaration"
	func (${1} ${2}) ${3}(${4}) ${5} {
		${6}
	}
	${0}

snippet fn "function declaration"
	func ${1}(${2}) ${3} {
		${4}
	}
	${0}

snippet fh "handler declaration"
	func ${1}(w http.ResponseWriter, r *http.Request) {
		${2}
	}
	${0}

snippet fa "anonymous function"
	func(${1}) ${2} {
		${0}
	}

snippet fwe "wrap error function"
	wrap := func(err error) error {
		return fmt.Errorf("${1}: %w", err)
	}

snippet fwes "wrap error with step function"
	wrap := func(step string, err error) error {
		return fmt.Errorf("${1}: %s: %w", step, err)
	}

snippet tyi "type interface declaration"
	type ${1} interface {
		${2}
	}

snippet tys "type struct declaration"
	type ${1} struct {
		${2}
	}

snippet tyf "type func declaration"
	type ${1} func(${2}) ${3}

snippet pkgm "package main and main function"
	package main

	func main() {
		${0}
	}

snippet pkg "named package"
	package `substitute(expand("%:h"), '\w*\/', '', 'g')`

	${0}

snippet ef "Error with log.Fatal(err)"
	if err != nil {
		log.Fatal(err)
	}

snippet er "Error return"
	if err != nil {
		return err
	}

snippet erw "Wrappped error return"
	if err != nil {
		return fmt.Errorf("${1}: %w", err)
	}

snippet erwf "Wrappped error return"
	if err != nil {
		return wrap(err)
	}

snippet er, "Error return with two return values"
	if err != nil {
		return ${1:nil}, err
	}

snippet erw, "Wrapped error return with two return values"
	if err != nil {
		return ${1:nil}, fmt.Errorf("${2}: %w", err)
	}

snippet erwf, "Wrappped error return"
	if err != nil {
		return ${1:nil}, wrap(err)
	}

snippet erwfs, "Wrappped with step error return"
	if err != nil {
		return ${1:nil}, wrap(${2}, err)
	}

snippet nr "Return nil"
	return nil

snippet nr, "Return multiple values with nil as last"
	return ${1}, nil

snippet pfw "Format print to writer"
	fmt.Fprintf(${1:writer}, "${2}\n", ${3})

snippet iota "const ( ... = iota )"
	const (
		${1:NAME} ${2:Type} = iota
		${0}
	)

snippet te "Test error"
	t.Errorf("${1:message}", ${2}, ${3})

snippet aeq "assert.Equal"
	assert.Equal(t, ${1}, ${2})

snippet aeqt "assert.Equal for table test"
	assert.Equal(t, test.${1}, ${2}, test.name)

snippet an "assert.Nil"
	assert.Nil(t, ${1}${2:, test.name})

snippet aerr "assert.Error"
	assert.Error(t, err)${0}

snippet anerr "assert.NoError"
	assert.NoError(t, err)${0}

snippet aerris "assert.ErrorIs"
	assert.ErrorIs(t, err, ${0})

snippet is "Init struct"
	&${1}{
		${2}
	}

snippet cns "multiple constants"
	const (
		${1}
	)

snippet cni "constants with iota"
	const (
		${1} = iota
		${0}
	)

snippet ppl "pp println"
	pp.Println(${1})

snippet forr, "for range loop"
	for ${1:_}, ${2} := range ${3} {
		${0:${VISUAL}}
	}

snippet ap= "append"
	${1} = append(${1}, ${0})

snippet hdle "scaffold handlers function"
	type ${1}Request struct {
	}

	type ${1}Response struct {
	}

	func (controller *Controller) ${1}(c echo.Context) error {
		request, err := parse${1}Request(c)
		if err != nil {
			return http.NewStatusBadRequestError(err)
		}

		response, err := controller.${1}(request)
		if err != nil {
			return fmt.Errorf("handling request: %w", err)
		}

		err = jsonapi.MarshalPayload(c.Response().Writer, response)
		if err != nil {
			return fmt.Errorf("marshaling response: %w", err)
		}

		return nil
	}

	func (controller *Controller) ${1}(request *${1}Request) (*${1}Response, error) {
		return &${1}Response{}, nil
	}

	func parse${1}Request(c echo.Context) (*${1}Request, error) {
		request := &${1}Request{}
		err := c.Bind(request)
		if err != nil {
			return nil, fmt.Errorf("binding request to context: %w", err)
		}

		validate := validator.New()
		err = validate.Struct(request)
		if err != nil {
			return nil, fmt.Errorf("validating request params: %w", err)
		}

		return request, nil
	}


snippet tth "scaffold handler's table tests"
	func Test${1}_${2}(t *testing.T) {
		testCases := []struct {
			desc         string
			responseBody string
		}{
			{
				desc: "when all parameters passed",
			},
		}

		for _, test := range testCases {
			t.Run(test.desc, func(t *testing.T) {
				ctx, recorder := context.New()
				handler := &${1}{}

				err := handler.${2}(ctx)

				switch test.desc {
				default:
					if assert.NoError(t, err) {
						assert.Equal(t, http.StatusOK, recorder.Code)
						assert.Equal(t, test.responseBody, recorder.Body.String())
					}
				}
			})
		}
	}

snippet tt "scaffold table tests"
	func Test${1}(t *testing.T) {
		testCases := []struct {
			desc         string
		}{
			{
				desc: "",
			},
		}

		for _, test := range testCases {
			t.Run(test.desc, func(t *testing.T) {
				${0}

				switch test.desc {
				default:
				}
			})
		}
	}

snippet sn "slice"
	[]${1}{
		${0}
	}

snippet si "slice item"
	{
		${0}
	},

snippet tti "new table test item"
	{
		desc: "${1}",
		${0}
	},
